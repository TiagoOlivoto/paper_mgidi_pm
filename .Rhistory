library(kableExtra) # html tables
library(emmeans)    # pairwise multiple comparison
library(ExpDes)     # pairwise multiple comparison
# Chunk 3
my_theme <-
theme_gray() +
theme(legend.title = element_blank(),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid.minor = element_blank())
# Chunk 4
df <-
g_simula(ngen = 5,
nrep = 3,
nvars = 3,
seed = c(3, 20, 40)) %>%
replace_string(GEN, pattern =  "H", replacement = "T")
# Chunk 5
v1_mod <- aov(V1 ~ REP + GEN, data = df)
v2_mod <- aov(V2 ~ REP + GEN, data = df)
v3_mod <- aov(V3 ~ REP + GEN, data = df)
anovas <-
list(v1 = tidy(v1_mod),
v2 = tidy(v2_mod),
v3 = tidy(v3_mod)) %>%
rbind_fill_id(.id = "Traits")
anovas
v1_means <- emmeans(v1_mod, ~ GEN)
v2_means <- emmeans(v2_mod, ~ GEN)
v3_means <- emmeans(v3_mod, ~ GEN)
# plots
p1 <-
plot(v1_means,
comparisons = TRUE,
CIs = FALSE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(df$V1)) +
my_theme
p2 <-
plot(v2_means,
comparisons = TRUE,
CIs = FALSE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(df$V2)) +
my_theme
p3 <-
plot(v3_means,
comparisons = TRUE,
CIs = FALSE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(df$V2)) +
my_theme
# Chunk 6
man <- manova(cbind(V1, V2, V3) ~ REP + GEN, data = df)
summary(man)
# predict the mean values
# compute a two-way table with genotypes in rows and traits in columns
pred_mat <-
predict(man) %>%
as.data.frame() %>%
mutate(TRAT = df$GEN) %>%
means_by(TRAT) %>%
column_to_rownames("TRAT")
# higher values for all traits are better
ind <- mgidi(pred_mat,
ideotype = c("h, h, h"), # default
verbose = FALSE,
mineval = 0.5) # retains two factors
p4 <-
plot(ind,
x.lab = "Treatments",
y.lab = "MGIDI index",
radar = FALSE) +
my_theme
ind$sel_dif
# lower values for the first two traits
# higher values for the last
ind2 <- mgidi(pred_mat,
ideotype = c("l, l, h"),
verbose = FALSE,
mineval = 0.5) # retains two factors
p5 <-
plot(ind2,
x.lab = "Treatments",
y.lab = "MGIDI index",
radar = FALSE) +
my_theme
ind2$sel_dif
# lower values for all the traits
ind3 <- mgidi(pred_mat,
ideotype =  c("l, l, l"),
verbose = FALSE,
mineval = 0.5) # retains two factors
p6 <-
plot(ind3,
x.lab = "Treatments",
y.lab = "MGIDI index",
radar = FALSE) +
my_theme
ind3$sel_dif
# Chunk 7
arrange_ggplot((p1 + p2 + p3),
(p4 + p5 + p6),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
ggsave("figs/fig1.pdf", width = 8, height = 4)
# Chunk 8
# simulate data
df_g <-
g_simula(ngen = 75,
nrep = 3,
nvars = 10,
seed = 1:10)
# data in a 'long' format
df_ge_long <-
pivot_longer(df_g,
cols = -c(GEN:REP),
names_to = "trait")
# compute an ANOVA for each trait
models_ge <-
df_ge_long %>%
group_by(trait) %>%
doo(~aov(value ~ REP + GEN, data = .))
# obtain an anova table
anovas_ge <- models_ge$data %>% map_dfr(~.x %>% tidy(), .id = "TRAIT")
anovas_ge %>% filter(term == "GEN")
# Chunk 9
# example for V1
model_v1 <- models_ge$data[[1]]
means_v1 <- emmeans(model_v1, ~ GEN)
pairs <- pwpm(means_v1)
# Chunk 10
p7 <- plot(means_v1, comparisons = TRUE, CIs = FALSE)
p7
# Chunk 11
# shows only 'significant' (P-value < 0.05)
p8 <- pwpp(means_v1) + scale_x_continuous(limits = c(0, 0.05))
p8
# Chunk 12
with(df_g,
rbd(GEN, REP, V1))
# Chunk 13
man_complex <-
manova(cbind(V1,V2,V3,V4,V5,V6,V7,V8,V9,V10) ~ REP + GEN,
data = df_g)
summary(man_complex)
# generate a two-way table with predicted values in rows and traits in columns
pred_complex <- cbind(df_g[, 1:2], predict(man_complex))
mat_g <-
pred_complex %>%
means_by(GEN) %>%
column_to_rownames("GEN")
# higher values for all traits are better
ind4 <- mgidi(mat_g,
ideotype = rep("h", 10), # default
verbose = FALSE)
p9 <- plot(ind4, arrange.label = TRUE)
p9
ind4$sel_dif
# higher values desired for the first 7 traits
# lower values desired for the last 3 traits
ind5 <- mgidi(mat_g,
ideotype = c(rep("h", 7), rep("l", 3)),
verbose = FALSE)
p10 <- plot(ind5, arrange.label = TRUE)
p10
ind5$sel_dif
# lower values for all the traits
ind6 <- mgidi(mat_g,
ideotype =  rep("l", 10), # default
verbose = FALSE)
p11 <- plot(ind6, arrange.label = TRUE)
p11
ind6$sel_dif
# Chunk 14
rm(list = ls())
df <-
import("https://bit.ly/strawberry_data", setclass = "tbl") %>%
metan::as_factor(1:4)
str(df)
# Chunk 15
man_straw <- manova(
cbind(NNCF,WNCF,AWNCF,WUE,NDBF,NDFF,NDBH,PHYL,TA,NCF,TNF
,WCF, TWF,AWCF,OAWF,FY,TSS,TSS_TA,FIRM,L,CHROMA,H) ~ SUB*ORI*CUL, data = df)
tidy(man_straw, intercept =  TRUE)
# Chunk 16
# get the predicted values
pred_vals <- cbind(df[,1:4], predict(man_straw))
# Chunk 17
# compute a two-wat table with means by origin and cultivar
df_ori_cul <-
pred_vals %>%
means_by(ORI, CUL) %>%
concatenate(ORI, CUL, new_var = TRAT, .after = CUL) %>%
remove_cols(ORI, CUL) %>%
round_cols() %>%
column_to_rownames("TRAT")
df_ori_cul
(ideotype_vector <- c(rep("l", 9), rep("h", 13)))
mgidi_cul_ori <-
mgidi(df_ori_cul,                 # a two-way table
ideotype = ideotype_vector, # ideotype vector
SI = 50)                    # select two treatments
# Chunk 18
p_ind_cul_ori <-
plot(mgidi_cul_ori,
SI = 50,
radar = FALSE,
x.lab = "Origin x cultivar combination",
y.lab = "MGIDI index") +
theme_gray() +
theme(legend.title = element_blank(),
legend.position = "bottom")
# Chunk 19
p_cont_cul_ori <-
plot(mgidi_cul_ori,
type = "contribution", # Get the proportion plot
genotypes = "all", # All treatments (selected treatments are plotted by default)
title = "")
# save the plot
arrange_ggplot(p_ind_cul_ori, p_cont_cul_ori,
ncol = 1,
tag_levels = "a")
ggsave("figs/fig2.pdf", width = 4, height = 8)
# Chunk 20
dif_cul_ori <-
gmd(mgidi_cul_ori) %>%
mutate(negative = ifelse(SDperc <= 0 , "Negative", "Positive")) %>%
mutate(sense = ifelse(sense == "decrease", "Negative desired", "Positive desired"))
ggplot(dif_cul_ori, aes(SDperc, VAR)) +
geom_vline(xintercept = 0, size = 0.2) +
geom_col(aes(fill = negative),
width = 1,
col = "black",
size = 0.2) +
scale_x_continuous(expand = expansion(mult = 0.15)) +
facet_wrap(~ sense, scales = "free", ncol = 1) +
geom_text(aes(label = round(SDperc, 2),
hjust = ifelse(SDperc > 0, -0.1, 1.1)),
size = 2) +
labs(x = "Selection differential (%)",
y = "Traits") +
theme(legend.position = "bottom",
legend.title = element_blank())
ggsave("figs/fig3.pdf", width = 4, height = 5)
# Chunk 21
df_sub <-
pred_vals %>%
means_by(SUB) %>%
column_to_rownames("SUB")
mgidi_sub <-
mgidi(df_sub,  # a two-way table
ideotype = ideotype_vector, # ideotype vector
SI = 50) # select the top two substrates
# Chunk 22
p_ind_sub <-
plot(mgidi_sub,
SI = 50,
radar = FALSE,
x.lab = "Origin x cultivar combination",
y.lab = "MGIDI index") +
theme_gray() +
theme(legend.title = element_blank(),
legend.position = "bottom")
# Chunk 23
p_cont_sub <-
plot(mgidi_sub,
type = "contribution", # Get the proportion plot
genotypes = "all", # All treatments (selected treatments are plotted by default)
title = "")
# save the plot
arrange_ggplot(p_ind_sub, p_cont_sub,
ncol = 1,
tag_levels = "a")
ggsave("figs/fig4.pdf", width = 4, height = 8)
dif_sub <-
gmd(mgidi_sub) %>%
mutate(negative = ifelse(SDperc <= 0 , "Negative", "Positive")) %>%
mutate(sense = ifelse(sense == "decrease", "Negative desired", "Positive desired"))
ggplot(dif_sub, aes(SDperc, VAR)) +
geom_vline(xintercept = 0, size = 0.2) +
geom_col(aes(fill = negative),
width = 1,
col = "black",
size = 0.2) +
facet_wrap(~ sense, scales = "free", ncol = 1) +
geom_text(aes(label = round(SDperc, 2),
hjust = ifelse(SDperc > 0, -0.1, 1.1)),
size = 2) +
labs(x = "Selection differential (%)",
y = "Traits") +
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot(dif_sub, aes(SDperc, VAR)) +
geom_vline(xintercept = 0, size = 0.2) +
geom_col(aes(fill = negative),
width = 1,
col = "black",
size = 0.2) +
scale_x_continuous(expand = expansion(mult = 0.15)) +
facet_wrap(~ sense, scales = "free", ncol = 1) +
geom_text(aes(label = round(SDperc, 2),
hjust = ifelse(SDperc > 0, -0.1, 1.1)),
size = 2) +
labs(x = "Selection differential (%)",
y = "Traits") +
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot(dif_sub, aes(SDperc, VAR)) +
geom_vline(xintercept = 0, size = 0.2) +
geom_col(aes(fill = negative),
width = 1,
col = "black",
size = 0.2) +
scale_x_continuous(expand = expansion(mult = 0.1)) +
facet_wrap(~ sense, scales = "free", ncol = 1) +
geom_text(aes(label = round(SDperc, 2),
hjust = ifelse(SDperc > 0, -0.1, 1.1)),
size = 2) +
labs(x = "Selection differential (%)",
y = "Traits") +
theme(legend.position = "bottom",
legend.title = element_blank())
ggsave("figs/fig5.pdf", width = 4, height = 5)
ggplot(dif_cul_ori, aes(SDperc, VAR)) +
geom_vline(xintercept = 0, size = 0.2) +
geom_col(aes(fill = negative),
width = 1,
col = "black",
size = 0.2) +
scale_x_continuous(expand = expansion(mult = 0.15)) +
facet_wrap(~ sense, scales = "free", ncol = 1) +
geom_text(aes(label = round(SDperc, 2),
hjust = ifelse(SDperc > 0, -0.1, 1.1)),
size = 2) +
labs(x = "Selection differential (%)",
y = "Traits") +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.minor = element_blank())
ggsave("figs/fig3.pdf", width = 4, height = 5)
ggplot(dif_sub, aes(SDperc, VAR)) +
geom_vline(xintercept = 0, size = 0.2) +
geom_col(aes(fill = negative),
width = 1,
col = "black",
size = 0.2) +
scale_x_continuous(expand = expansion(mult = 0.1)) +
facet_wrap(~ sense, scales = "free", ncol = 1) +
geom_text(aes(label = round(SDperc, 2),
hjust = ifelse(SDperc > 0, -0.1, 1.1)),
size = 2) +
labs(x = "Selection differential (%)",
y = "Traits") +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.minor = element_blank())
ggsave("figs/fig5.pdf", width = 4, height = 5)
substrates <- import("data/TABLES.xlsx", sheet = "substrate2")
print_table(substrates,
scape = TRUE,
caption = "Concentrations of ingredients used to formulate each one of the four substrates used in the experiment.")
print_table = function(df,
caption,
digits = 2,
full_width = TRUE,
col.names = NA,
longtable = FALSE,
scape = FALSE,
html_opt = c("striped", "responsive")){
kable(df,
align  = "l",
col.names = col.names,
booktabs = T,
digits = digits,
format = "html",
linesep = "",
caption = caption,
escape = scape,
longtable = longtable) %>%
kable_classic(lightable_options = "striped", html_font = "sans", full_width = full_width) %>%
kable_styling(bootstrap_options = html_opt)
}
nutrient <- import("data/TABLES.xlsx", sheet = "nutrient")
substrates <- import("data/TABLES.xlsx", sheet = "substrate2")
print_table(substrates,
scape = TRUE,
caption = "Concentrations of ingredients used to formulate each one of the four substrates used in the experiment.")
####### UNIVARIATE GAINS
df_uni <-
pred_vals %>%
rownames_to_column() %>%
add_cols(SELECTED = ifelse(CUL == "CAM" & ORI  == "IMP", "yes", "no"))
ov_mean <-
means_by(df_uni) %>%
t() %>%
as.data.frame() %>%
rownames_to_column("VAR")%>%
rename(Xo = V1)
direct_fy <-
means_by(df_uni, SELECTED) %>%
subset(SELECTED == "yes") %>%
remove_cols(1) %>%
t() %>%
as.data.frame() %>%
rownames_to_column("VAR") %>%
rename(Xs_uni = V1)
df_direct <-
left_join(ov_mean, direct_fy) %>%
add_cols(SD = Xs_uni - Xo,
SDperc = (SD / Xo * 100),
goal =  c(rep("Low", 9), rep("High", 13)),
sucess = ifelse(goal == "Low" & SDperc < 0  |  goal == "High" & SDperc > 0, "Yes", "No"))
print_table(df_direct,
caption = "Selection differential for mean performance based on the direct and univariate selection on fruit yield",
col.names = c("TRAIT", "Xo", "Xs",  "SD", "SD (%)", "Goal", "Success"),
scape = TRUE) %>%
row_spec(which(df_direct$sucess == "No"), color = "red")
View(df_uni)
wrc <- import("data/TABLES.xlsx", sheet = "substrate3")
wrc
wrc <-
import("data/TABLES.xlsx", sheet = "substrate3") %>%
pivot_longer(-SUBSTRATE,
names_to = at)
wrc <-
import("data/TABLES.xlsx", sheet = "substrate3") %>%
pivot_longer(-SUBSTRATE,
names_to = "wrc")
wrc
wrc <-
import("data/TABLES.xlsx", sheet = "substrate3") %>%
pivot_longer(-SUBSTRATE,
names_to = "tension")
ggplot(wrc, aes(tension, value)) +
geom_point()
ggplot(wrc, aes(tension, value, color = SUBSTRATE)) +
geom_point()
ggplot(wrc, aes(tension, value, color = SUBSTRATE)) +
geom_point() +
geom_line()
ggplot(wrc, aes(tension, value, color = SUBSTRATE)) +
geom_point() +
geom_path()
ggplot(wrc, aes(tension, value, color = SUBSTRATE)) +
geom_point() +
stat_summary(geom = "line")
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
geom_point() +
stat_summary(geom = "line")
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
geom_point() +
stat_summary(geom = "line", fun = mean)
View(wrc)
wrc <-
import("data/TABLES.xlsx", sheet = "substrate3") %>%
pivot_longer(-SUBSTRATE,
names_to = "tension") %>%
as_numeric(tension)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
geom_point() +
stat_summary(geom = "line", fun = mean)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "errorbar", fun = mean) +
stat_summary(geom = "line", fun = mean)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "errorbar", fun.data = mean_se) +
stat_summary(geom = "line", fun = mean)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.2) +
stat_summary(geom = "line", fun = mean)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean) +
labs(x = "Water tension (kPa)",
y = expression(Moisture~(cm^3~cm^{-3})))
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean) +
labs(x = "Water tension (kPa)",
y = expression(Moisture~(cm^3.cm^{-3})))
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean) +
labs(x = "Water tension (kPa)",
y = expression(Moisture~(cm^3~.~cm^{-3})))
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean) +
labs(x = "Water tension (kPa)",
y = expression(Moisture~(cm^3 cm^{-3})))
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean) +
labs(x = "Water tension (kPa)",
y = expression(Moisture~(cm^3~cm^{-3})))
1850+458+57
2570-2365
