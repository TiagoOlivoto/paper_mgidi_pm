v2_mod <- aov(V2 ~ REP + GEN, data = df)
v3_mod <- aov(V3 ~ REP + GEN, data = df)
anovas <-
list(v1 = tidy(v1_mod),
v2 = tidy(v2_mod),
v3 = tidy(v3_mod)) %>%
rbind_fill_id(.id = "Traits")
anovas
v1_means <- emmeans(v1_mod, ~ GEN)
v2_means <- emmeans(v2_mod, ~ GEN)
v3_means <- emmeans(v3_mod, ~ GEN)
# plots
p1 <-
plot(v1_means,
comparisons = TRUE,
CIs = FALSE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(df$V1)) +
my_theme
p2 <-
plot(v2_means,
comparisons = TRUE,
CIs = FALSE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(df$V2)) +
my_theme
p3 <-
plot(v3_means,
comparisons = TRUE,
CIs = FALSE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(df$V2)) +
my_theme
# Chunk 5
man <- manova(cbind(V1, V2, V3) ~ REP + GEN, data = df)
summary(man)
# predict the mean values
# compute a two-way table with genotypes in rows and traits in columns
pred_mat <-
predict(man) %>%
as.data.frame() %>%
mutate(TRAT = df$GEN) %>%
mean_by(TRAT) %>%
column_to_rownames("TRAT")
# higher values for all traits are better
ind <- mgidi(pred_mat,
ideotype = c("h, h, h"), # default
verbose = FALSE,
mineval = 0.5) # retains two factors
p4 <-
plot(ind,
x.lab = "Treatments",
y.lab = "MGIDI index",
radar = FALSE) +
my_theme
ind$sel_dif
# lower values for the first two traits
# higher values for the last
ind2 <- mgidi(pred_mat,
ideotype = c("l, l, h"),
verbose = FALSE,
mineval = 0.5) # retains two factors
p5 <-
plot(ind2,
x.lab = "Treatments",
y.lab = "MGIDI index",
radar = FALSE) +
my_theme
ind2$sel_dif
# lower values for all the traits
ind3 <- mgidi(pred_mat,
ideotype =  c("l, l, l"),
verbose = FALSE,
mineval = 0.5) # retains two factors
p6 <-
plot(ind3,
x.lab = "Treatments",
y.lab = "MGIDI index",
radar = FALSE) +
my_theme
ind3$sel_dif
# Chunk 6
arrange_ggplot((p1 + p2 + p3),
(p4 + p5 + p6),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
ggsave("figs/fig1.pdf", width = 10, height = 5)
# Chunk 7
# simulate data
df_g <-
g_simula(ngen = 75,
nrep = 3,
nvars = 10,
seed = 1:10)
# data in a 'long' format
df_ge_long <-
pivot_longer(df_g,
cols = -c(GEN:REP),
names_to = "trait")
# compute an ANOVA for each trait
models_ge <-
df_ge_long %>%
group_by(trait) %>%
doo(~aov(value ~ REP + GEN, data = .))
# obtain an anova table
anovas_ge <- models_ge$data %>% map_dfr(~.x %>% tidy(), .id = "TRAIT")
anovas_ge %>% filter(term == "GEN")
# Chunk 8
# example for V1
model_v1 <- models_ge$data[[1]]
means_v1 <- emmeans(model_v1, ~ GEN)
pairs <- pwpm(means_v1)
# Chunk 9
p7 <-
plot(means_v1, comparisons = TRUE, CIs = FALSE) +
my_theme
p7
# Chunk 10
# shows only 'significant' (P-value < 0.05)
p8 <- pwpp(means_v1) + scale_x_continuous(limits = c(0, 0.05))
p8
# Chunk 11
plot <-
with(df_g,
DBC(GEN, REP, V1))
df_plot <-
mat_g |>
rownames_to_column("TRAT") |>
mutate(selected = ifelse(TRAT %in% ind4$sel_gen, "Yes", "No")) |>
pivot_longer(V1:V10)
man_complex <-
manova(cbind(V1,V2,V3,V4,V5,V6,V7,V8,V9,V10) ~ REP + GEN,
data = df_g)
summary(man_complex)
# generate a two-way table with predicted values in rows and traits in columns
pred_complex <- cbind(df_g[, 1:2], predict(man_complex))
mat_g <-
pred_complex %>%
mean_by(GEN) %>%
column_to_rownames("GEN")
# higher values for all traits are better
ind4 <- mgidi(mat_g,
ideotype = rep("h", 10), # default
verbose = FALSE)
p9 <- plot(ind4)
p9
ind4$sel_dif
# higher values desired for the first 7 traits
# lower values desired for the last 3 traits
ind5 <- mgidi(mat_g,
ideotype = c(rep("h", 7), rep("l", 3)),
verbose = FALSE)
p10 <- plot(ind5)
p10
ind5$sel_dif
# lower values for all the traits
ind6 <- mgidi(mat_g,
ideotype =  rep("l", 10), # default
verbose = FALSE)
p11 <- plot(ind6)
p11
ind6$sel_dif
df_plot <-
mat_g |>
rownames_to_column("TRAT") |>
mutate(selected = ifelse(TRAT %in% ind4$sel_gen, "Yes", "No")) |>
pivot_longer(V1:V10)
df_mean <-
df_plot |>
mean_by(name)
df_mean
df_plot
df_plot <-
mat_g |>
rownames_to_column("TRAT") |>
# mutate(selected = ifelse(TRAT %in% ind4$sel_gen, "Yes", "No")) |>
pivot_longer(V1:V10)
df_plot
ge_plot(TRAT, name, value)
ge_plot(df_plot, TRAT, name, value)
ge_plot
ge_plot(df_plot, name, TRAT, value)
ge_plot(df_plot, name, TRAT, value, values = FALSE)
ge_plot(df_plot, TRAT, name, value, values = FALSE)
ind4$MGIDI
mgidi_cul_ori <-
mgidi(df_ori_cul,                 # a two-way table
ideotype = ideotype_vector, # ideotype vector
weights = weight,           # weigth vector
SI = 50)                    # select two treatments
# compute a two-wat table with means by origin and cultivar
df_ori_cul <-
pred_vals %>%
mean_by(ORI, CUL) %>%
concatenate(ORI, CUL, new_var = TRAT, .after = CUL) %>%
remove_cols(ORI, CUL) %>%
round_cols() %>%
column_to_rownames("TRAT")
# get the predicted values
pred_vals <- cbind(df[,1:4], predict(man_straw))
# compute a two-wat table with means by origin and cultivar
df_ori_cul <-
pred_vals %>%
mean_by(ORI, CUL) %>%
concatenate(ORI, CUL, new_var = TRAT, .after = CUL) %>%
remove_cols(ORI, CUL) %>%
round_cols() %>%
column_to_rownames("TRAT")
# get the predicted values
pred_vals <- cbind(df[,1:4], predict(man_straw))
man_straw <-
manova(
cbind(NNCF,WNCF,AWNCF,WUE,NDBF,NDFF,NDBH,PHYL,TA,NCF,TNF
,WCF, TWF,AWCF,OAWF,FY,TSS,TSS_TA,FIRM,L,CHROMA,H) ~ SUB*ORI*CUL,
data = df)
rm(list = ls())
df <-
import("https://bit.ly/strawberry_data", setclass = "tbl") %>%
metan::as_factor(1:4)
str(df)
man_straw <-
manova(
cbind(NNCF,WNCF,AWNCF,WUE,NDBF,NDFF,NDBH,PHYL,TA,NCF,TNF
,WCF, TWF,AWCF,OAWF,FY,TSS,TSS_TA,FIRM,L,CHROMA,H) ~ SUB*ORI*CUL,
data = df)
tidy(man_straw, intercept =  TRUE)
# get the predicted values
pred_vals <- cbind(df[,1:4], predict(man_straw))
# compute a two-wat table with means by origin and cultivar
df_ori_cul <-
pred_vals %>%
mean_by(ORI, CUL) %>%
concatenate(ORI, CUL, new_var = TRAT, .after = CUL) %>%
remove_cols(ORI, CUL) %>%
round_cols() %>%
column_to_rownames("TRAT")
df_ori_cul
(ideotype_vector <- c(rep("l", 9), rep("h", 13)))
(weight <-  c(rep(1, 9), 4, 1, 4, rep(1, 10)))
mgidi_cul_ori <-
mgidi(df_ori_cul,                 # a two-way table
ideotype = ideotype_vector, # ideotype vector
weights = weight,           # weigth vector
SI = 50)                    # select two treatments
View(mgidi_cul_ori)
View(mgidi_cul_ori[["FA"]])
View(mgidi_cul_ori[["sel_dif"]])
View(mgidi_cul_ori[["FA"]])
View(mgidi_cul_ori[["PCA"]])
View(df_ori_cul)
mgidi_aaby <-
import("data/df_aaby.xlsx") |>
tidy_colnames() |>
column_to_rownames("CULTIVAR") |>
mgidi(SI = 2)
library(metan)
mgidi_aaby <-
import("data/df_aaby.xlsx") |>
tidy_colnames() |>
column_to_rownames("CULTIVAR") |>
mgidi(SI = 2)
# Chunk 1: global_options
knitr::opts_chunk$set(cache = FALSE, comment = "##", collapse = TRUE)
xaringanExtra::use_panelset()
# Chunk 2
library(metan)      # MGIDI index
library(rio)        # data importation
library(tidyverse)  # plots, data manipulation
# Chunk 3
df <-
import("https://bit.ly/strawberry_data", setclass = "tbl") %>%
metan::as_factor(1:4)
# helper function
plot_vars <- function(df,  y, vjustlab = -3){
df_cult_ori <-
df %>%
group_by(ORI, CUL) %>%
desc_stat({{y}}, stats = c("mean, se")) %>%
add_cols(upper = mean + se)
df_sub <-
df %>%
group_by(SUB) %>%
desc_stat({{y}}, stats = c("mean, se")) %>%
add_cols(upper = mean + se)
max_vals <- max(max(df_cult_ori$upper), max(df_sub$upper))
p1 <-
ggplot(df_cult_ori, aes(CUL, mean, fill = ORI)) +
stat_summary(fun = mean,
geom = "bar",
width = .7,
position = position_dodge(width = .7),
color = "black") +
geom_errorbar(aes(ymin = mean - se, ymax =  mean + se),
width = 0.2,
position = position_dodge(width = .7)) +
geom_hline(aes(yintercept = mean(mean)), linetype = 2) +
geom_text(aes(label = round(mean, 2)),
position = position_dodge(width = .7),
vjust = 5) +
theme(legend.position = "bottom") +
scale_y_continuous(expand = expansion(c(0, 0.1)),
limits = c(0, max_vals)) +
labs(y = quo_name(enquo(y)),
x = "Cultivars") +
theme_metan() +
theme(legend.position = c(0.1, 0.9))
p2 <-
ggplot(df_sub, aes(SUB, mean)) +
geom_bar(stat = "summary",
color = "black",
fill = "gray",
width = .7,
fun = "mean") +
geom_hline(aes(yintercept = mean(mean)), linetype = 2) +
geom_errorbar(aes(ymin = mean - se, ymax =  mean + se),
width = 0.2,
position = position_dodge(width = .7)) +
geom_text(aes(label = round(mean, 2)),
vjust = 5) +
theme_metan() +
theme(legend.position = "bottom") +
scale_y_continuous(expand = expansion(c(0, 0.1)),
limits = c(0, max_vals)) +
labs(y = quo_name(enquo(y)),
x = "Substrate")
return(
arrange_ggplot(p1, p2,
tag_levels = "a")
)
}
# Chunk 4
plot_vars(df, AWNCF)
# Chunk 5
plot_vars(df, NDBF)
# Chunk 6
plot_vars(df, NDFF)
# Chunk 7
plot_vars(df, NDBH)
# Chunk 8
plot_vars(df, NNCF)
# Chunk 9
plot_vars(df, PHYL)
# Chunk 10
plot_vars(df, TA)
# Chunk 11
plot_vars(df, WNCF, vjustlab = -5)
# Chunk 12
plot_vars(df, WUE)
# Chunk 13
plot_vars(df, AWCF, vjustlab = -1)
# Chunk 14
plot_vars(df, CHROMA, vjustlab = -1)
# Chunk 15
plot_vars(df, FIRM, vjustlab = -1)
# Chunk 16
plot_vars(df, FY)
# Chunk 17
plot_vars(df, H, vjustlab = -1)
# Chunk 18
plot_vars(df, L, vjustlab = -1)
# Chunk 19
plot_vars(df, NCF)
# Chunk 20
plot_vars(df, OAWF, vjustlab = -1)
# Chunk 21
plot_vars(df, TNF)
# Chunk 22
plot_vars(df, TSS, vjustlab = -1)
# Chunk 23
plot_vars(df, TSS_TA, vjustlab = -1)
# Chunk 24
plot_vars(df, TWF)
# Chunk 25
plot_vars(df, WCF)
# Chunk 26
wrc <-
import("data/TABLES.xlsx", sheet = "substrate3") %>%
pivot_longer(-SUBSTRATE,
names_to = "tension") %>%
as_numeric(tension)
ggplot(wrc, aes(tension, value, color = SUBSTRATE, group = SUBSTRATE)) +
stat_summary(geom = "point", fun = mean) +
stat_summary(geom = "line", fun = mean) +
labs(x = "Water tension (kPa)",
y = expression(Moisture~(cm^3~cm^{-3})))
mgidi_aaby <-
import("data/df_aaby.xlsx") |>
tidy_colnames() |>
column_to_rownames("CULTIVAR") |>
mgidi(SI = 2)
plot(mgidi_aaby, type = "contribution")
plot(mgidi_aaby)
df <-
g_simula(1000, 2, 100) |>
make_mat(GEN, REP, Y)
View(df)
g_simula
df <-
g_simula(1000, 2, 100)
View(df)
df <-
g_simula(1000, 2, 100) |>
mean_by(GEN) |>
column_to_rownames("GEN")
library(bench)
mark(
min_time = .1,
dat[dat$x > 500, ],
dat[which(dat$x > 500), ],
subset(dat, x > 500))
dat <- data.frame(x = runif(100, 1, 1000), y=runif(10, 1, 1000))
mark(
min_time = .1,
dat[dat$x > 500, ],
dat[which(dat$x > 500), ],
subset(dat, x > 500))
View(df)
mark(mgidi(df),
prcomp(df),
lm(V1 ~ ., data = df))
mark(mgidi(df),
prcomp(df),
lm(V1 ~ ., data = df),
max_iterations = 100)
mark(mgidi(df),
prcomp(df),
lm(V1 ~ ., data = df),
max_iterations = 2)
mgidi(df)
prcomp(df)
df <-
g_simula(200, 2, 80) |>
mean_by(GEN) |>
column_to_rownames("GEN")
mgidi(df)
df <-
g_simula(150, 2, 50) |>
mean_by(GEN) |>
column_to_rownames("GEN")
mgidi(df)
mark_res <-
mark(mgidi(df),
prcomp(df),
lm(V1 ~ ., data = df),
max_iterations = 10)
system.time(
mgidi(df)
)
system.time(
prcomp(df)
)
df <-
g_simula(10, 2, 5) |>
mean_by(GEN) |>
column_to_rownames("GEN")
system.time(
mgidi(df)
)
system.time(
mgidi(df)
)
system.time(
prcomp(df)
)
df <-
g_simula(10000, 2, 5) |>
mean_by(GEN) |>
column_to_rownames("GEN")
df <-
g_simula(500, 2, 5) |>
mean_by(GEN) |>
column_to_rownames("GEN")
system.time(
prcomp(df)
)
df <-
g_simula(1000, 2, 5) |>
mean_by(GEN) |>
column_to_rownames("GEN")
system.time(
prcomp(df)
)
prcomp(df)
View(df)
df <-
g_simula(150, 2, 50) |>
mean_by(GEN) |>
column_to_rownames("GEN")
system.time(
mgidi(df)
)
system.time(
prcomp(df)
)
system.time(
mgidi(df)
)
mgidi_aaby <-
import("data/df_aaby.xlsx") |>
tidy_colnames() |>
column_to_rownames("CULTIVAR") |>
mgidi(SI = 2)
mgidi_aaby <-
import("data/df_aaby.xlsx") |>
tidy_colnames() |>
column_to_rownames("CULTIVAR")
View(mgidi_aaby)
